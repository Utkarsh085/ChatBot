import nltk
import numpy as np
import random
import string
import random
import io
import scipy
import matplotlib
import warnings
warnings.filterwarnings('ignore')
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from nltk.stem import WordNetLemmatizer
nltk.download('popular',quiet=True)
with open("c:/Users/hp/New.txt","r",encoding='utf8',errors='ignore') as fin:    
    raw=fin.read()
    raw=raw.lower()
#nltk.download('punkt')
#nltk.download('wordnet')
sent_tokens = nltk.sent_tokenize(raw)# converts to list of sentences 

word_tokens = nltk.word_tokenize(raw)# converts to list of words
lemmer= WordNetLemmatizer()
#lemmer=nltk.stem.WordNetLemmatizer()
def LemTokens(tokens):
    #print([lemmer.lemmatize(token) for token in tokens])
    return [lemmer.lemmatize(token) for token in tokens]
remove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)

def LemNormalize(text):
    #print("LemNoralize  ",LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict))))
    return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))
#response-----------------------------------------------------------------
def response(user_response):
    robo_response=''
    sent_tokens.append(user_response)

    TfVec=TfidfVectorizer(tokenizer=LemNormalize,stop_words='english')
    print(TfVec)
    tfidf=TfVec.fit_transform(sent_tokens)
    print("tfidf ",tfidf)
    vals=cosine_similarity(tfidf[-1],tfidf)
    print("vals  ",vals)
    idx=vals.argsort()[0][-2]
    print("idx ",idx)
    flat=vals.flatten()
    print("flat",flat)
    flat.sort()
    print("flat",flat)
    req_tfidf=flat[-2]
    print("response  ",req_tfidf)
    if(req_tfidf==0):
        robo_response+="I am sorry! i don't understand you"
        return robo_response
    else:
        robo_response+=sent_tokens[idx]
        return robo_response

Greeting_inputs=("hello","hi","greetings","sup","what's up","hey")
Greeting_responses=["hi","hey","*nods*","hi","hi there","hello","I am glad ! You are talking to me"]
#Greetings-------------------------------------------------------------------
def greeting(sentence):
    for word in sentence.split():
        if word.lower() in Greeting_inputs:
            return random.choice(Greeting_responses)
#Last_update-----------------------------------------------------------
flag=True
print("ROBO: My name is Robo. I will answer your queries about Chatbota.If you want to exit, type Bye!")
while(flag==True):
    user_response=input()
    user_response=user_response.lower()
    if(user_response!="bye"):
        if(user_response=='thanks' or user_response=='thanks you'):
            flag=False
            print("Robo: You are welcome ")
        else:
            if(greeting(user_response)!=None):
                print("Robo:"+greeting(user_response))
            else:
                print("Robo: ",end="")
                print(response(user_response))
                sent_tokens.remove(user_response)
    else:
        flag=False
        print("Robo: Bye! take care..")
                
